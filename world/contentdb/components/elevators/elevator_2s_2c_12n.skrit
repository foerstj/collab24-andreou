//////////////////////////////////////////////////////////////////////////////
//
// File     :  elevator_2s_2c_12n.skrit
// Author(s):  James Loe, Eric Tams
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool			_server_only$					= true;
property string			_doc$							= "2-state, 2-connection, 12-node elevator";
property string			_required_component$			= "placement";

// exported properties
property SiegeId		elevator_node$					= 0						doc = "Node used for transition";
property int			elevator_door1_level1$			= 0						doc = "Door used for connection with node1 at level 1";
property int			elevator_door1_level2$			= 0						doc = "Door used for connection with node1 at level 2";

property int			elevator_door2_level1$			= 0						doc = "Door used for connection with node2 at level 1";
property int			elevator_door2_level2$			= 0						doc = "Door used for connection with node2 at level 2";

property int			elevator_door3_level1$			= 0						doc = "Door used for connection with node3 at level 1";
property int			elevator_door3_level2$			= 0						doc = "Door used for connection with node3 at level 2";

property int			elevator_door4_level1$			= 0						doc = "Door used for connection with node4 at level 1";
property int			elevator_door4_level2$			= 0						doc = "Door used for connection with node4 at level 2";

property int			elevator_door5_level1$			= 0						doc = "Door used for connection with node5 at level 1";
property int			elevator_door5_level2$			= 0						doc = "Door used for connection with node5 at level 2";

property int			elevator_door6_level1$			= 0						doc = "Door used for connection with node6 at level 1";
property int			elevator_door6_level2$			= 0						doc = "Door used for connection with node6 at level 2";

property int			elevator_door7_level1$			= 0						doc = "Door used for connection with node7 at level 1";
property int			elevator_door7_level2$			= 0						doc = "Door used for connection with node7 at level 2";

property int			elevator_door8_level1$			= 0						doc = "Door used for connection with node8 at level 1";
property int			elevator_door8_level2$			= 0						doc = "Door used for connection with node8 at level 2";

property int			elevator_door9_level1$			= 0						doc = "Door used for connection with node9 at level 1";
property int			elevator_door9_level2$			= 0						doc = "Door used for connection with node9 at level 2";

property int			elevator_door10_level1$			= 0						doc = "Door used for connection with node10 at level 1";
property int			elevator_door10_level2$			= 0						doc = "Door used for connection with node10 at level 2";

property int			elevator_door11_level1$			= 0						doc = "Door used for connection with node11 at level 1";
property int			elevator_door11_level2$			= 0						doc = "Door used for connection with node11 at level 2";

property int			elevator_door12_level1$			= 0						doc = "Door used for connection with node12 at level 1";
property int			elevator_door12_level2$			= 0						doc = "Door used for connection with node12 at level 2";

property SiegeId		node1_level1$					= 0						doc = "Node used for stable connection at level 1";
property int			door1_level1$					= 0						doc = "Door used for connection with at level 1";

property SiegeId		node2_level1$					= 0						doc = "Node used for node2 connection at level 1";
property int			door2_level1$					= 0						doc = "Door used for node2 connection at level 1";

property SiegeId		node3_level1$					= 0						doc = "Node used for node3 connection at level 1";
property int			door3_level1$					= 0						doc = "Door used for node3 connection at level 1";

property SiegeId		node4_level1$					= 0						doc = "Node used for node4 connection at level 1";
property int			door4_level1$					= 0						doc = "Door used for node4 connection at level 1";

property SiegeId		node5_level1$					= 0						doc = "Node used for node5 connection at level 1";
property int			door5_level1$					= 0						doc = "Door used for node5 connection at level 1";

property SiegeId		node6_level1$					= 0						doc = "Node used for node6 connection at level 1";
property int			door6_level1$					= 0						doc = "Door used for node6 connection at level 1";

property SiegeId		node7_level1$					= 0						doc = "Node used for node7 connection at level 1";
property int			door7_level1$					= 0						doc = "Door used for node7 connection at level 1";

property SiegeId		node8_level1$					= 0						doc = "Node used for node8 connection at level 1";
property int			door8_level1$					= 0						doc = "Door used for node8 connection at level 1";

property SiegeId		node9_level1$					= 0						doc = "Node used for node9 connection at level 1";
property int			door9_level1$					= 0						doc = "Door used for node9 connection at level 1";

property SiegeId		node10_level1$					= 0						doc = "Node used for node10 connection at level 1";
property int			door10_level1$					= 0						doc = "Door used for node10 connection at level 1";

property SiegeId		node11_level1$					= 0						doc = "Node used for node11 connection at level 1";
property int			door11_level1$					= 0						doc = "Door used for node11 connection at level 1";

property SiegeId		node12_level1$					= 0						doc = "Node used for node12 connection at level 1";
property int			door12_level1$					= 0						doc = "Door used for node12 connection at level 1";

property SiegeId		node1_level2$					= 0						doc = "Node used for stable connection at level 2";	
property int			door1_level2$					= 0						doc = "Door used for connection at level 2";

property SiegeId		node2_level2$					= 0						doc = "Node used for node2 connection at level 2";
property int			door2_level2$					= 0						doc = "Door used for node2 connection at level 2";

property SiegeId		node3_level2$					= 0						doc = "Node used for node3 connection at level 2";
property int			door3_level2$					= 0						doc = "Door used for node3 connection at level 2";

property SiegeId		node4_level2$					= 0						doc = "Node used for node4 connection at level 2";
property int			door4_level2$					= 0						doc = "Door used for node4 connection at level 2";

property SiegeId		node5_level2$					= 0						doc = "Node used for node5 connection at level 2";
property int			door5_level2$					= 0						doc = "Door used for node5 connection at level 2";

property SiegeId		node6_level2$					= 0						doc = "Node used for node6 connection at level 2";
property int			door6_level2$					= 0						doc = "Door used for node6 connection at level 2";

property SiegeId		node7_level2$					= 0						doc = "Node used for node7 connection at level 2";
property int			door7_level2$					= 0						doc = "Door used for node7 connection at level 2";

property SiegeId		node8_level2$					= 0						doc = "Node used for node8 connection at level 2";
property int			door8_level2$					= 0						doc = "Door used for node8 connection at level 2";

property SiegeId		node9_level2$					= 0						doc = "Node used for node9 connection at level 2";
property int			door9_level2$					= 0						doc = "Door used for node9 connection at level 2";

property SiegeId		node10_level2$					= 0						doc = "Node used for node10 connection at level 2";
property int			door10_level2$					= 0						doc = "Door used for node10 connection at level 2";

property SiegeId		node11_level2$					= 0						doc = "Node used for node11 connection at level 2";
property int			door11_level2$					= 0						doc = "Door used for node11 connection at level 2";

property SiegeId		node12_level2$					= 0						doc = "Node used for node12 connection at level 2";
property int			door12_level2$					= 0						doc = "Door used for node12 connection at level 2";

property float			duration$						= 0						doc = "Length (in seconds) of transition";
property bool           oneshot_nowait$         		= false                 doc = "Set to true you want 'waitfortrigger = false' to happen only once.";
property bool			level1_waitfortrigger$			= true					doc = "Wait for activated message before continuing to level 2";
property bool			level2_waitfortrigger$			= true					doc = "Wait for activated message before continuing to level 1";

property bool			level1_connectpaths$			= true					doc = "Connect pathing information on level 1";
property bool			level2_connectpaths$			= true					doc = "Connect pathing information on level 2";

property eAxisHint		level1_trans2_hint$				= AH_NONE				doc = "Transition from level 1 to level 2 rotation hint (AH_NONE,AH_XAXIS_POSITIVE,AH_XAXIS_NEGATIVE,AH_YAXIS_POSITIVE,AH_YAXIS_NEGATIVE,AH_ZAXIS_POSITIVE,AH_ZAXIS_NEGATIVE)";
property eAxisHint		level2_trans1_hint$				= AH_NONE				doc = "Transition from level 2 to level 1 rotation hint";

property eWorldEvent	Level1_Message$					= WE_REQ_ACTIVATE		doc = "Trans1 World Message to Send.";
property scid      		Level1_Scid$											doc = "Scid of External Object during first transition.";
property float			Level1_Message_Delay$			= -1.0					doc = "Delay before sending message. -1 to use default MCP lag";

property eWorldEvent	Level2_Message$					= WE_REQ_ACTIVATE 		doc = "Trans2 World Message to Send.";
property scid      		Level2_Scid$											doc = "Scid of External Trigger during second transition.";
property float			Level2_Message_Delay$			= -1.0					doc = "Delay before sending message. -1 to use default MCP lag";

property eWorldEvent	Moving1_Message$				= WE_REQ_ACTIVATE		doc = "Up World Message to Send.";
property scid      		Moving1_Scid$											doc = "Scid of External Trigger during up position.";
property float			Moving1_Message_Delay$			= -1.0					doc = "Delay before sending message. -1 to use default MCP lag";

property eWorldEvent	Moving2_Message$				= WE_REQ_ACTIVATE	 	doc = "Down World Message to Send.";
property scid			Moving2_Scid$											doc = "Scid of External Trigger during down position.";
property float			Moving2_Message_Delay$			= -1.0					doc = "Delay before sending message. -1 to use default MCP lag";

property string			Material$												doc = "Material of the elevator, if blank no sounds are played.";

property string			Moving1_ActionInfo$								doc = "List of fades/moods to apply on all elevator riders at level1";													

property string			Moving2_ActionInfo$								doc = "List of fades/moods to apply on all elevator riders at level2";


bool                    bPermanentDeactivate$           = false;
owner                                                   = GoSkritComponent;
float mcp_lag$ = 0.5;

//////////////////////////////////////////////////////////////////////////////

trigger OnGoDrawDebugHud$
{
	Goid goid1$ = Level1_Scid$.Goid;
	Goid goid2$ = Moving1_Scid$.Goid;
	Goid goid3$ = Level2_Scid$.Goid;
	Goid goid4$ = Moving2_Scid$.Goid;

	if( goid1$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid1$.go.Placement.Position,
									 MakeColor( 0, 1.0, 0, 0.5 ),
									 ToString( Level1_Message$ ) );
	}

	if( goid2$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid2$.go.Placement.Position,
									 MakeColor( 1.0, 1.0, 0, 0.5 ),
									 ToString( Moving1_Message$ ) );
	}

	if( goid3$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid3$.go.Placement.Position,
									 MakeColor( 0, 1.0, 0, 0.5 ),
									 ToString( Level2_Message$ ) );
	}

	if( goid4$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid4$.go.Placement.Position,
									 MakeColor( 1.0, 1.0, 0, 0.5 ),
									 ToString( Moving2_Message$ ) );
	}
}

trigger OnGoHandleMessage$( WE_REQ_DEACTIVATE )
{
	bPermanentDeactivate$	= true;
	SetState Deactivated$;
}

trigger OnTimer$( 1 )
{
	TriggerSys.SSendActionToPartyMembersRemainingInNode(elevator_node$, Moving1_ActionInfo$);
}

trigger OnTimer$( 2 )
{
	TriggerSys.SSendActionToPartyMembersRemainingInNode(elevator_node$, Moving2_ActionInfo$);
}

state Deactivated$
{
}

startup state wait$
{
	transition -> L1_Wait$: OnGoHandleMessage( WE_ENTERED_WORLD );
}

state L1_Wait$
{
	transition
	{
		-> L1_Moving$: OnGoHandleMessage( WE_REQ_ACTIVATE );
	}

	event OnEnterState$
	{
		if( level1_waitfortrigger$ == false )
		{   
			#only( game )
          	[[
				SetState L1_Moving$;

                if (oneshot_nowait$)
                {
                    level1_waitfortrigger$ = true;
				}
			]]
        }
	}

	event OnExitState$
	{
		if( !bPermanentDeactivate$ )
		{
			TTMessages msg$ = MakeTTMessages();
			// $$ removed checks to see if the goid we are sending to is valid so we can message things outside the frustum. -ET
			if ( Moving1_Scid$.IsValid() )
			{
				float delay$ = Moving1_Message_Delay$;
				if ( delay$ < 0.0 )
				{
					delay$ = mcp_lag$;
				}

				msg$.BeginEvent = Moving1_Message$;
				msg$.BeginSendTo = Moving1_Scid$;
				msg$.BeginDelay = delay$;
			}

			if ( Level2_Scid$.IsValid() )
        	{
				float delay$ = Level2_Message_Delay$;
				if ( delay$ < 0.0 )
				{
					delay$ = mcp_lag$;
				}
				
				msg$.EndEvent = Level2_Message$;
				msg$.EndSendTo = Level2_Scid$;
				msg$.EndDelay = delay$;
       		}
			
			WorldTerrain.SRequestNodeTransition( elevator_node$, elevator_door1_level2$,
												 node1_level2$, door1_level2$,
												 duration$, level1_trans2_hint$, owner.Go.Goid,
												 level2_connectpaths$, true, msg$ );
		
			if ( !StringTool.IsEmpty( Material$ ) )
        	{
				owner.Go.SPlayMaterialSound( "moving_1", Material$, true);
        	}
		}
		if ( !StringTool.IsEmpty( Moving1_ActionInfo$ ) )
		{
			float Actiondelay$ = Math.MinFloat( duration$ / 2.0, 0.5 );
			This.CreateTimer( 1, Actiondelay$ );
			This.SetTimerGlobal(1, true);
		}
	}
}

state L1_Moving$
{
	transition -> L2_Wait$: OnGoHandleMessage( WE_TERRAIN_TRANSITION_DONE ) =
	{
		if( node2_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door2_level2$,
												 node2_level2$, door2_level2$,
												 level2_connectpaths$, true );
		}
		if( node3_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door3_level2$,
												 node3_level2$, door3_level2$,
												 level2_connectpaths$, true );
		}
		if( node4_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door4_level2$,
												 node4_level2$, door4_level2$,
												 level2_connectpaths$, true );
		}
		if( node5_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door5_level2$,
												 node5_level2$, door5_level2$,
												 level2_connectpaths$, true );
		}
		if( node6_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door6_level2$,
												 node6_level2$, door6_level2$,
												 level2_connectpaths$, true );
		}
		if( node7_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door7_level2$,
												 node7_level2$, door7_level2$,
												 level2_connectpaths$, true );
		}
		if( node8_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door8_level2$,
												 node8_level2$, door8_level2$,
												 level2_connectpaths$, true );
		}
		if( node9_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door9_level2$,
												 node9_level2$, door9_level2$,
												 level2_connectpaths$, true );
		}
		if( node10_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door10_level2$,
												 node10_level2$, door10_level2$,
												 level2_connectpaths$, true );
		}
		if( node11_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door11_level2$,
												 node11_level2$, door11_level2$,
												 level2_connectpaths$, true );
		}
		if( node12_level2$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door12_level2$,
												 node12_level2$, door12_level2$,
												 level2_connectpaths$, true );
		}
		if ( !StringTool.IsEmpty( Material$ ) )
        {
			owner.Go.SPlayMaterialSound( "level_2", Material$, true);
        }
	}
}

state L2_Wait$
{
	transition
	{
		-> L2_Moving$: OnGoHandleMessage( WE_REQ_ACTIVATE );
	}

	event OnEnterState$
	{
		if( level2_waitfortrigger$ == false )
		{
			#only( game )
          	[[
				SetState L2_Moving$;

                if (oneshot_nowait$)
                {
                    level2_waitfortrigger$ = true;
				}
			]]
		}
	}

	event OnExitState$
	{
		if( !bPermanentDeactivate$ )
		{
			TTMessages msg$ = MakeTTMessages(); 
			
			if ( Moving2_Scid$.IsValid() )
			{
				float delay$ = Moving2_Message_Delay$;
				if ( delay$ < 0.0 )
				{
					delay$ = mcp_lag$;
				}
				
				msg$.BeginEvent = Moving2_Message$;
				msg$.BeginSendTo = Moving2_Scid$;
				msg$.BeginDelay = delay$;
			}
			
			if ( Level1_Scid$.IsValid() )
        	{
				float delay$ = Level1_Message_Delay$;
				if ( delay$ < 0.0 )
				{
					delay$ = mcp_lag$;
				}
				
				msg$.EndEvent = Level1_Message$;
				msg$.EndSendTo = Level1_Scid$;
				msg$.EndDelay = delay$;
			}
			
			WorldTerrain.SRequestNodeTransition( elevator_node$, elevator_door1_level1$,
												 node1_level1$, door1_level1$,
												 duration$, level2_trans1_hint$, owner.Go.Goid,
												 level1_connectpaths$, true, msg$ );
		
			if ( !StringTool.IsEmpty( Material$ ) )
        	{
				owner.Go.SPlayMaterialSound( "moving_2", Material$, true);
        	}
        	if ( !StringTool.IsEmpty( Moving2_ActionInfo$ ) )
			{
				float Actiondelay$ = Math.MinFloat( duration$ / 2.0, 0.5 );
				This.CreateTimer( 2, Actiondelay$ );
				This.SetTimerGlobal( 2, true );
			}
		}
	}
}

state L2_Moving$
{
	transition -> L1_Wait$: OnGoHandleMessage( WE_TERRAIN_TRANSITION_DONE ) =
	{
		if( node2_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door2_level1$,
												 node2_level1$, door2_level1$,
												 level1_connectpaths$, true );
		}
		if( node3_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door3_level1$,
												 node3_level1$, door3_level1$,
												 level1_connectpaths$, true );
		}
		if( node4_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door4_level1$,
												 node4_level1$, door4_level1$,
												 level1_connectpaths$, true );
		}
		if( node5_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door5_level1$,
												 node5_level1$, door5_level1$,
												 level1_connectpaths$, true );
		}
		if( node6_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door6_level1$,
												 node6_level1$, door6_level1$,
												 level1_connectpaths$, true );
		}
		if( node7_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door7_level1$,
												 node7_level1$, door7_level1$,
												 level1_connectpaths$, true );
		}
		if( node8_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door8_level1$,
												 node8_level1$, door8_level1$,
												 level1_connectpaths$, true );
		}
		if( node9_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door9_level1$,
												 node9_level1$, door9_level1$,
												 level1_connectpaths$, true );
		}
		if( node10_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door10_level1$,
												 node10_level1$, door10_level1$,
												 level1_connectpaths$, true );
		}
		if( node11_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door11_level1$,
												 node11_level1$, door11_level1$,
												 level1_connectpaths$, true );
		}
		if( node12_level1$ != 0 )
		{
			WorldTerrain.SRequestNodeConnection( elevator_node$, elevator_door12_level1$,
												 node12_level1$, door12_level1$,
												 level1_connectpaths$, true );
		}
		if ( !StringTool.IsEmpty( Material$ ) )
        {
			owner.Go.SPlayMaterialSound( "level_1", Material$, true);
        }
	}
}

//////////////////////////////////////////////////////////////////////////////
